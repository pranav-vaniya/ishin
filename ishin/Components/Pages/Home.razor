@page "/"
@inject IshinService ishinService
@inject IJSRuntime jSRuntime
@inject NavigationManager navigationManager

@if (showSplashScreen == true)
{
	<Splash></Splash>
}
else
{
	<MudStack Spacing="0" StretchItems="StretchItems.Middle" Style="height: 100vh;">
		<MudPaper Elevation="0" Class="px-2 rounded-0 default-background-color">
			<MudStack Row StretchItems="StretchItems.Start" AlignItems="AlignItems.Center">
				<MudText Typo="Typo.h5" Class="default-text-color title-font-family">ishin</MudText>
				<MudIconButton Icon="@Icons.Material.Filled.SelectAll" OnClick="ToggleIsSelectModelVisible" Class="default-text-color mx-0 px-0"></MudIconButton>
				<MudIconButton Icon="@Icons.Material.Filled.MoreVert" OnClick="ToggleIsMenuVisible" Class="default-text-color mx-0 px-0"></MudIconButton>
				<MudAvatar Size="Size.Small" @onclick="ToggleIsProfileVisible">
					<MudImage Src="images/ishin.jpg"></MudImage>
				</MudAvatar>
			</MudStack>

			@if (isProfileVisible)
			{
				<Profile></Profile>
			}

			@if (isMenuVisible)
			{
				<MudPaper Elevation="0" Class="border default-background-color pa-2 mb-4">
					<MudButton OnClick="NavigateToTrainPage" StartIcon="@Icons.Material.Filled.ModelTraining" FullWidth Class="default-text-color">Train Your Own Model</MudButton>
					<MudButton Href="https://github.com/pranav-vaniya/ishin" StartIcon="@Icons.Custom.Brands.GitHub" FullWidth Class="default-text-color">Project Source</MudButton>
					<MudButton OnClick="ToggleIsMenuVisible" StartIcon="@Icons.Material.Filled.Close" FullWidth Class="default-text-color">Close Menu</MudButton>
				</MudPaper>
			}

			@if (isSelectModelVisible)
			{
				<MudPaper Elevation="0" Class="border default-background-color pa-2 mb-4">
					@if (modelNames.Count > 0)
					{
						<MudSelect @bind-Value="selectedModelName" Variant="Variant.Text" Underline=false Class="default-text-color default-background-color mb-4">
							@foreach (ModelData model in models)
							{
								<MudSelectItem Value="@model.Name">@model.Name</MudSelectItem>
							}
						</MudSelect>

						<MudTextField @bind-Value="totalWordsToBeGenerated" Variant="Variant.Text" Underline=false Label="Total Words to be Generated per prompt" Class="default-text-color" Immediate></MudTextField>
					}
					else
					{
						<MudText Typo="Typo.body2" Class="default-text-color">
							You have no trained models. Please train atleast one model to get started.
						</MudText>
					}
				</MudPaper>
			}
		</MudPaper>

		<MudPaper Elevation="0" Class="px-2 overflow-x-scroll rounded-0 default-background-color hidden-scrollbar">
			@if (models.Count == 0)
			{
				<MudText Typo="Typo.body1" Align="Align.Center" Class="default-text-color">
					You have no trained models. Please train atleast one model to get started.
				</MudText>
			}

			@if (conversation.Messages.Count == 0)
			{
				<MudPaper Elevation="0" Class="default-background-color d-flex justify-center align-center" Style="height: 100%">
					<MudPaper Elevation="0" Class="default-background-color">
						<MudText Typo="Typo.h4" Align="Align.Center" Class="default-text-color title-font-family">ishin</MudText>
						<MudText Typo="Typo.body2" Align="Align.Center" Class="default-text-color">send a message to get started</MudText>
					</MudPaper>
				</MudPaper>
			}
			else
			{
				@foreach (ConversationMessage message in conversation.Messages)
				{
					ChatBubblePosition chatBubblePosition = message.Sender == User.Ishin ? ChatBubblePosition.Start : ChatBubblePosition.End;
					string userInitial = message.Sender == User.Ishin ? "I" : "A";

					<MudChat ChatPosition="@chatBubblePosition">
						<MudAvatar Size="Size.Small">@userInitial</MudAvatar>
						<MudChatBubble Class="default-text-color default-background-secondary-color text-align-left" Style="max-width: 80%;">
							@message.Content
						</MudChatBubble>
					</MudChat>
				}
			}

			<div id="bottom-of-the-chat-screen"></div>
		</MudPaper>

		<MudPaper Elevation="0" Class="px-2 rounded-0 default-background-color">
			<MudTextField @bind-Value="userInputText" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Send" Variant="Variant.Text" AutoGrow Underline=false AdornmentColor="Color.Tertiary" Placeholder="Ask Anything" Margin="Margin.Dense" Class="default-text-color my-2" OnAdornmentClick="AddMessageToConversation" Immediate></MudTextField>
		</MudPaper>
	</MudStack>
}

@code {
	bool showSplashScreen = true;
	bool isMenuVisible = false, isProfileVisible = false, isSelectModelVisible = false;
	Conversation conversation = new();
	string userInputText = string.Empty;
	Dictionary<int, string> itos = new();
	List<ModelData> models = new();
	ModelData selectedModel = new();
	List<string> modelNames = new();
	string selectedModelName = string.Empty;
	Dictionary<string, List<int>> trainedModel = new();
	int totalWordsToBeGenerated = 20;
	Random random = new Random();

	private async Task AddMessageToConversation()
	{
		if (string.IsNullOrWhiteSpace(userInputText))
		{
			return;
		}

		conversation.Messages.Add(new ConversationMessage
			{
				Sender = User.Atlas,
				Content = userInputText
			}
		);

		StateHasChanged();
		await ScrollToBottom();

		string responseFromIshin = string.Empty;

		if (models.Count == 0)
		{
			responseFromIshin = "You have no trained models. Please train atleast one model to get started.";
		}
		else
		{
			string sentence = Regex.Replace(userInputText.ToLower(), @"[^a-z\s]", "");
			sentence = Regex.Replace(sentence, @"\s+", " ");
			sentence = sentence.Trim();

			List<int> x = new();

			foreach (string word in sentence.Split(" ").ToList())
			{
				x.Add(itos.FirstOrDefault(x => x.Value == word).Key);
			}

			var paddedx = new List<int>();
			int missing = selectedModel.NGram - x.Count;

			if (missing > 0)
			{
				for (int i = 0; i < missing; i++)
				{
					paddedx.Add(random.Next(selectedModel.Itos.Count));
				}

				paddedx.AddRange(x);
			}
			else
			{
				paddedx = x.Skip(x.Count - selectedModel.NGram).ToList();
			}

			for (int i = 0; i < totalWordsToBeGenerated; i++)
			{
				string key = string.Join("-<>-", paddedx);
				int forward = 0;

				if (selectedModel.TrainedModel.ContainsKey(key))
				{
					forward += SelectRecursiveWeighted(selectedModel.TrainedModel[key]);
				}
				else
				{
					forward = random.Next(selectedModel.Itos.Count);
				}

				paddedx.RemoveAt(0);
				paddedx.Add(forward);
				responseFromIshin += itos[forward] + " ";
			}
		}

		userInputText = string.Empty;
		conversation.Messages.Add(new ConversationMessage
			{
				Sender = User.Ishin,
				Content = responseFromIshin
			}
		);

		StateHasChanged();
		await ScrollToBottom();
	}

	public int SelectRecursiveWeighted(List<int> list)
	{
		double probability = 0.6;
		double remainingChance = 1.0;

		for (int i = 0; i < list.Count; i++)
		{
			double currentChance = remainingChance * probability;

			if (random.NextDouble() < currentChance)
			{
				return list[i];
			}

			remainingChance *= (1.0 - probability);
		}

		return list[^1];
	}

	private async Task ScrollToBottom()
	{
		await jSRuntime.InvokeVoidAsync("scrollToBottomOfChat");
	}

	protected override async Task OnInitializedAsync()
	{
		_ = HideSplashScreen();
		// conversation = ishinService.GetSampleConversation();
		models = ishinService.LoadAllModels();
		modelNames = models.Select(x => x.Name).ToList();

		if (models.Count > 0)
		{
			selectedModel = models[0];
			selectedModelName = selectedModel.Name;
			itos = selectedModel.Itos;
			trainedModel = selectedModel.TrainedModel;
		}
	}

	async Task HideSplashScreen()
	{
		await Task.Delay(4500);
		showSplashScreen = false;
		StateHasChanged();
	}

	private void NavigateToTrainPage()
	{
		navigationManager.NavigateTo("/train", forceLoad: true);
	}

	private void ToggleIsMenuVisible()
	{
		isMenuVisible = !isMenuVisible;
	}

	private void ToggleIsProfileVisible()
	{
		isProfileVisible = !isProfileVisible;
	}

	private void ToggleIsSelectModelVisible()
	{
		isSelectModelVisible = !isSelectModelVisible;
	}
}